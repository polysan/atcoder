1 秒間で処理できる for 文ループの回数は、10^8=100,000,000 回程度

// longで入力を受け取る
scan.nextLong();

// 文字列にキャスト
String n = String.valueOf(i);

// 数値にキャスト
int num = Integer.parseInt(str);

// 範囲チェック A：下限　B：上限
Math.max(A, value) == Math.min(value, B)

// strが指定の文字列を含むか
str.contains("xx");

// 指定の文字列で始まるか、終わるか
String url = "http://www.examples.com/index.php";
System.out.println(url.startsWith("http://")); // 結果：true
System.out.println(url.endsWith(".html")); // 結果：false

// 大きい方、または小さい方をとる
Math.max(20, 12)
Math.min(20, 12)

// 余りの計算
(A * B) % P
→ ((A % P) * (B % P)) % P

// list宣言
List<String> list = new ArrayList<String>();

// 数値の各桁の総和を返す
    static int findSumOfDigits(int n){
        int sum = 0;
        while(n != 0){
            sum += n%10;
            n /= 10;
        }
        return sum;
    }

// 配列ソート 昇順
Arrays.sort(cards);

// 配列ソート 降順 cardsはInteger
Arrays.sort(cards, Comparator.reverseOrder());

// 配列ストリーム toArrayで配列で返せる
int[] arr = new int[N];
int[] filArr = Arrays.stream(arr).distinct().toArray();

// 2次元配列の宣言・初期化
boolean [][] kumiawase;
boolean [][] kumiawase = new boolean[1][];

// 標準入力値を分割
String line = scan.next();
String[] marks = line.split("");